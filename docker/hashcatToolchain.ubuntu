ARG UBUNTU_VERSION=16.04 \
    WD=/opt/toolchain \
    HOST_ARCH=x86_64

FROM ubuntu:${UBUNTU_VERSION} AS builder-toolchain

LABEL org.opencontainers.image.authors="Gabriele 'matrix' Gristina <matrix@hashcat.net>" \
      org.opencontainers.image.title="Hashcat cross-build toolchain (Ubuntu based)" \
      org.opencontainers.image.version="1.2" \
      org.opencontainers.image.description="Docker image based on Ubuntu (tested from version 16.04 onwards) for cross-compiling Hashcat (Windows and Linux) and optionally scanning for potential vulnerabilities using clang-tidy and scan-build." \
      org.opencontainers.image.source="https://github.com/hashcat/hashcat/blob/master/docker/hashcatToolchain.ubuntu" \
      org.opencontainers.image.licenses="MIT"

ARG MAX_CORES=12
ARG UBUNTU_VERSION \
    WD \
    HOST_ARCH

ENV UBUNTU_VERSION=${UBUNTU_VERSION} \
    HOST_ARCH=${HOST_ARCH} \
    MAX_CORES=${MAX_CORES} \
    WD=${WD}

## Install dependencies

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get -y --no-install-recommends install apt-utils && apt-get -y --no-install-recommends install \
    autoconf automake \
    bison build-essential \
    ca-certificates \
    flex \
    gawk git gperf \
    libtool \
    pkg-config \
    texinfo \
    unzip \
    wget \
    zlib1g-dev \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

## Prepare directories

RUN mkdir -p $WD/src $WD/build $WD/native $WD/cross /opt/linux-python

## Build

# OpenSSL

ARG OPENSSL_VERSION=OpenSSL_1_1_1w
ENV OPENSSL_VERSION=${OPENSSL_VERSION}

RUN cd $WD/src && git clone --depth 1 --branch ${OPENSSL_VERSION} https://github.com/openssl/openssl && cd openssl && \
    ./config --prefix=/opt/openssl --openssldir=/opt/openssl shared zlib \
    && CORES=$(nproc); if [ "$CORES" -gt "$MAX_CORES" ]; then CORES=$MAX_CORES; fi; \
    make -j${CORES} && make install_sw && \
    echo "/opt/openssl/lib" > /etc/ld.so.conf.d/toolchain.conf && ldconfig && cd $WD/src && rm -rf openssl

# Python (linux)

ARG LINUX_PYTHON_VERSION=3.13.5
ENV LINUX_PYTHON_VERSION=${LINUX_PYTHON_VERSION}

RUN cd $WD/src && git clone --depth 1 --branch v${LINUX_PYTHON_VERSION} https://github.com/python/cpython python-${LINUX_PYTHON_VERSION} && \
    cd python-${LINUX_PYTHON_VERSION} && \
    ./configure --prefix=/opt/linux-python --with-openssl=/opt/openssl \
    && CORES=$(nproc); if [ "$CORES" -gt "$MAX_CORES" ]; then CORES=$MAX_CORES; fi; \
    make -j${CORES} && make install && cd $WD/src && rm -rf python-*

ENV PATH=/opt/linux-python/bin:$PATH

# binutils (native, minimal)

ARG BINUTILS_VERSION=2_45
ENV BINUTILS_VERSION=${BINUTILS_VERSION}

RUN cd $WD/src && git clone --depth 1 --branch binutils-${BINUTILS_VERSION} https://sourceware.org/git/binutils-gdb.git binutils-${BINUTILS_VERSION} && \
    mkdir -p $WD/build/binutils-native-minimal && cd $WD/build/binutils-native-minimal && \
    $WD/src/binutils-${BINUTILS_VERSION}/configure \
    --prefix=$WD/native \
    --disable-multilib \
    --disable-werror \
    --disable-gdb --disable-gdbserver \
    && CORES=$(nproc); if [ "$CORES" -gt "$MAX_CORES" ]; then CORES=$MAX_CORES; fi; \
    make -j${CORES} && make install

ENV PATH=$WD/native/bin:$PATH

RUN update-alternatives --install /usr/bin/ar ar $WD/native/bin/ar 100 && \
    update-alternatives --install /usr/bin/ranlib ranlib $WD/native/bin/ranlib 100 && \
    update-alternatives --install /usr/bin/${HOST_ARCH}-linux-gnu-ld ${HOST_ARCH}-linux-gnu-ld $WD/native/bin/ld 100 && \
    update-alternatives --set ar $WD/native/bin/ar && \
    update-alternatives --set ranlib $WD/native/bin/ranlib && \
    update-alternatives --set ${HOST_ARCH}-linux-gnu-ld $WD/native/bin/ld

# gcc (native)

ARG GCC_VERSION=15.2.0
ENV GCC_VERSION=${GCC_VERSION}

RUN cd $WD/src && git clone --depth 1 --branch releases/gcc-${GCC_VERSION} https://gcc.gnu.org/git/gcc.git gcc-${GCC_VERSION} && \
    cd gcc-${GCC_VERSION} && ./contrib/download_prerequisites && \
    mkdir -p $WD/build/gcc-native && cd $WD/build/gcc-native && \
    $WD/src/gcc-${GCC_VERSION}/configure \
    --prefix=$WD/native \
    --build=${HOST_ARCH}-linux-gnu --host=${HOST_ARCH}-linux-gnu --target=${HOST_ARCH}-linux-gnu \
    --enable-languages=c,c++,lto --disable-multilib --disable-werror \
    --enable-shared --enable-static \
    --enable-gold=yes --enable-lto --enable-plugin \
    --enable-threads=posix \
    --enable-silent-rules \
    --with-tune=generic \
    --enable-linker-build-id --enable-nls --enable-bootstrap --enable-clocale=gnu --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new \
    --enable-gnu-unique-object --disable-vtable-verify --enable-libmpx --enable-default-pie --with-system-zlib --with-target-system-zlib \
    --enable-offload-targets=nvptx-none --without-cuda-driver --enable-checking=release \
    && CORES=$(nproc); if [ "$CORES" -gt "$MAX_CORES" ]; then CORES=$MAX_CORES; fi; \
    make -j${CORES} && make install

RUN echo "$WD/native/lib" >> /etc/ld.so.conf.d/toolchain.conf && \
    echo "$WD/native/lib64" >> /etc/ld.so.conf.d/toolchain.conf && \
    ldconfig && \
    update-alternatives --install /usr/bin/gcc gcc $WD/native/bin/gcc 100 && \
    update-alternatives --install /usr/bin/g++ g++ $WD/native/bin/g++ 100 && \
    update-alternatives --install /usr/bin/cc cc $WD/native/bin/gcc 100 && \
    update-alternatives --install /usr/bin/c++ c++ $WD/native/bin/g++ 100 && \
    update-alternatives --set gcc $WD/native/bin/gcc && \
    update-alternatives --set g++ $WD/native/bin/g++ && \
    update-alternatives --set cc $WD/native/bin/gcc && \
    update-alternatives --set c++ $WD/native/bin/g++

# binutils (native, full with LTO)

RUN mkdir -p $WD/build/binutils-native-full && cd $WD/build/binutils-native-full && \
    $WD/src/binutils-${BINUTILS_VERSION}/configure \
    --prefix=$WD/native \
    --disable-multilib \
    --disable-werror \
    --disable-gdb --disable-gdbserver \
    --enable-gold=yes --enable-ld=yes \
    --enable-lto --enable-plugins \
    && CORES=$(nproc); if [ "$CORES" -gt "$MAX_CORES" ]; then CORES=$MAX_CORES; fi; \
    make -j${CORES} && make install && \
    ln -s $WD/native/libexec/gcc/${HOST_ARCH}-linux-gnu/15.2.0/liblto_plugin.so $WD/native/lib/bfd-plugins/

# binutils-cross (minimal)

RUN mkdir -p $WD/build/binutils-cross-minimal && cd $WD/build/binutils-cross-minimal && \
    $WD/src/binutils-${BINUTILS_VERSION}/configure \
    --prefix=$WD/cross \
    --target=x86_64-w64-mingw32 \
    --disable-multilib \
    --disable-werror \
    --disable-gdb --disable-gdbserver \
    && CORES=$(nproc); if [ "$CORES" -gt "$MAX_CORES" ]; then CORES=$MAX_CORES; fi; \
    make -j${CORES} && make install

# mingw-w64 headers

ARG MINGW_VERSION=13.0.0 \
    MINGW_CRT=ucrt \
    MINGW_THREADS=win32

ENV MINGW_VERSION=${MINGW_VERSION} \
    MINGW_CRT=${MINGW_CRT} \
    MINGW_THREADS=${MINGW_THREADS}

RUN cd $WD/src && git clone --depth 1 --branch v${MINGW_VERSION} https://github.com/mingw-w64/mingw-w64 && \
    mkdir -p $WD/build/mingw-w64-headers && cd $WD/build/mingw-w64-headers && \
    $WD/src/mingw-w64/mingw-w64-headers/configure \
    --host=x86_64-w64-mingw32 \
    --prefix=$WD/cross/x86_64-w64-mingw32 \
    --with-default-msvcrt=${MINGW_CRT} \
    --enable-idl \
    --enable-sdk=all \
    && CORES=$(nproc); if [ "$CORES" -gt "$MAX_CORES" ]; then CORES=$MAX_CORES; fi; \
    make -j${CORES} && make install

# GCC-cross (stage1)

RUN mkdir -p $WD/build/gcc-stage1 && cd $WD/build/gcc-stage1 && \
    $WD/src/gcc-${GCC_VERSION}/configure \
    --prefix=$WD/cross \
    --target=x86_64-w64-mingw32 \
    --enable-languages=c \
    --disable-multilib \
    --enable-threads=${MINGW_THREADS} \
    --with-arch=x86-64 \
    --with-tune=generic \
    --with-seh \
    --with-default-msvcrt=${MINGW_CRT} \
    --enable-silent-rules \
    && CORES=$(nproc); if [ "$CORES" -gt "$MAX_CORES" ]; then CORES=$MAX_CORES; fi; \
    make -j${CORES} all-gcc && make install-gcc

ENV PATH=$WD/cross/bin:$PATH

# binutils-cross (full, with LTO)

RUN mkdir -p $WD/build/binutils-cross-full && cd $WD/build/binutils-cross-full && \
    $WD/src/binutils-${BINUTILS_VERSION}/configure \
    --prefix=$WD/cross \
    --target=x86_64-w64-mingw32 \
    --disable-multilib \
    --disable-werror \
    --disable-gdb --disable-gdbserver \
    --enable-gold=yes --enable-ld=yes \
    --enable-lto --enable-plugins \
    && CORES=$(nproc); if [ "$CORES" -gt "$MAX_CORES" ]; then CORES=$MAX_CORES; fi; \
    make -j${CORES} && make install

# mingw-w64 crt

RUN mkdir -p $WD/build/mingw-w64-crt && cd $WD/build/mingw-w64-crt && \
    $WD/src/mingw-w64/mingw-w64-crt/configure \
    --host=x86_64-w64-mingw32 \
    --prefix=$WD/cross/x86_64-w64-mingw32 \
    --with-default-msvcrt=${MINGW_CRT} \
    --enable-silent-rules \
    --disable-lib32 --enable-lib64 \
    --enable-wildcard \
    && CORES=$(nproc); if [ "$CORES" -gt "$MAX_CORES" ]; then CORES=$MAX_CORES; fi; \
    make -j${CORES} && make install

# mingw-w64 winpthreads

RUN mkdir -p $WD/build/winpthreads && cd $WD/build/winpthreads && \
    $WD/src/mingw-w64/mingw-w64-libraries/winpthreads/configure \
    --host=x86_64-w64-mingw32 \
    --prefix=$WD/cross/x86_64-w64-mingw32 \
    --libdir=$WD/cross/x86_64-w64-mingw32/lib \
    --enable-silent-rules \
    --disable-shared \
    && CORES=$(nproc); if [ "$CORES" -gt "$MAX_CORES" ]; then CORES=$MAX_CORES; fi; \
    make -j${CORES} && make install

# GCC-cross (stage2, with LTO)

RUN mkdir -p $WD/build/gcc-stage2 && cd $WD/build/gcc-stage2 && \
    $WD/src/gcc-${GCC_VERSION}/configure \
    --prefix=$WD/cross \
    --target=x86_64-w64-mingw32 \
    --enable-languages=c,c++,lto \
    --enable-shared --enable-static \
    --enable-gold=yes --enable-lto --enable-plugin \
    --disable-multilib \
    --enable-threads=${MINGW_THREADS} \
    --with-arch=x86-64 \
    --with-tune=generic \
    --with-seh \
    --with-default-msvcrt=${MINGW_CRT} \
    --build=${HOST_ARCH}-linux-gnu --disable-option-checking --enable-silent-rules --disable-maintainer-mode --disable-dependency-tracking \
    --with-headers --with-system-zlib --enable-libstdcxx-time=yes --enable-version-specific-runtime-libs \
    --enable-fully-dynamic-string --enable-libatomic --enable-libstdcxx-filesystem-ts=yes \
    && CORES=$(nproc); if [ "$CORES" -gt "$MAX_CORES" ]; then CORES=$MAX_CORES; fi; \
    make -j${CORES} && make install && \
    ln -s $WD/cross/libexec/gcc/x86_64-w64-mingw32/15.2.0/liblto_plugin.so $WD/cross/lib/bfd-plugins/

# CMake

ARG CMAKE_VERSION=4.1.1
ENV CMAKE_VERSION=${CMAKE_VERSION}

RUN cd $WD/src && wget --no-verbose -t 3 -c --https-only https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-${HOST_ARCH}.sh && \
    chmod +x cmake-${CMAKE_VERSION}-linux-${HOST_ARCH}.sh && \
    ./cmake-${CMAKE_VERSION}-linux-${HOST_ARCH}.sh --skip-license --prefix=${WD}/native && rm -rf cmake-${CMAKE_VERSION}-linux-${HOST_ARCH}.sh

# Mold

ARG MOLD_VERSION=2.40.4
ENV MOLD_VERSION=${MOLD_VERSION}

RUN cd $WD/src && git clone --branch v${MOLD_VERSION} https://github.com/rui314/mold && cd mold && \
    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${WD}/native -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc -B build \
    && CORES=$(nproc); if [ "$CORES" -gt "$MAX_CORES" ]; then CORES=$MAX_CORES; fi; \
    cmake --build build -j${CORES} && cmake --build build --target install && cd $WD/src && rm -rf mold

# Clang and tools (with LTO)

ARG CLANG_VERSION=21.1.2
ENV CLANG_VERSION=${CLANG_VERSION}

ENV LD_LIBRARY_PATH=$WD/native/lib64:$WD/native/lib

RUN cd $WD/src && git clone --depth 1 --branch llvmorg-${CLANG_VERSION} https://github.com/llvm/llvm-project && \
    mkdir -p $WD/build/llvm && cd $WD/build/llvm && \
    cmake -G "Unix Makefiles" \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=$WD/clang \
    -DCMAKE_C_COMPILER=$WD/native/bin/gcc \
    -DCMAKE_CXX_COMPILER=$WD/native/bin/g++ \
    -DLLVM_ENABLE_PROJECTS="clang;lld;clang-tools-extra" \
    -DLLVM_ENABLE_RUNTIMES="libcxxabi;libcxx" \
    -DLLVM_TARGETS_TO_BUILD="X86;AArch64" \
    -DLLVM_BINUTILS_INCDIR=$WD/native/include \
    -DLLVM_BUILD_LLVM_DYLIB=OFF \
    -DLLVM_LINK_LLVM_DYLIB=OFF \
    -DLLVM_USE_LINKER=mold \
    -DLLVM_ENABLE_LTO=OFF \
    -DLLVM_ENABLE_PLUGINS=ON \
    -DLLVM_INCLUDE_TESTS=OFF \
    -DLLVM_INCLUDE_EXAMPLES=OFF \
    -DLLVM_INCLUDE_BENCHMARKS=OFF \
    -DLLVM_ENABLE_ASSERTIONS=OFF \
    -DLLVM_BUILD_DOCS=OFF \
    -DLIBCXX_ENABLE_SHARED=OFF \
    -DLIBCXX_ENABLE_STATIC=ON \
    -DLIBCXX_ENABLE_EXCEPTIONS=ON \
    -DLIBCXX_ENABLE_RTTI=ON \
    -DLIBCXX_INCLUDE_TESTS=FALSE \
    -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON \
    -DLIBCXXABI_ENABLE_SHARED=OFF \
    -DLIBCXXABI_ENABLE_STATIC=ON \
    -DLIBCXXABI_USE_LLVM_UNWINDER=OFF \
    -DCMAKE_EXE_LINKER_FLAGS="-Wl,-rpath,'\$ORIGIN/../lib64:\$ORIGIN/../lib'" \
    -DCMAKE_SHARED_LINKER_FLAGS="-Wl,-rpath,'\$ORIGIN/../lib64:\$ORIGIN/../lib'" \
    $WD/src/llvm-project/llvm \
    && CORES=$(nproc); if [ "$CORES" -gt "$MAX_CORES" ]; then CORES=$MAX_CORES; fi; \
    make -j${CORES} && make install && \
    ln -s $WD/clang/lib/LLVMgold.so $WD/native/lib/bfd-plugins/ && \
    ln -s $WD/clang/lib/LLVMgold.so $WD/cross/lib/bfd-plugins/

ENV PATH=$WD/clang/bin:$PATH

# Dump toolchain config to file

RUN echo "Toolchain config: " > /root/toolchain-info.log && \
    echo "WD: ${WD}" >> /root/toolchain-info.log && \
    echo "MAX_CORES: ${MAX_CORES}" >> /root/toolchain-info.log && \
    echo "HOST_ARCH: ${HOST_ARCH}" >> /root/toolchain-info.log && \
    echo "UBUNTU_VERSION: ${UBUNTU_VERSION}" >> /root/toolchain-info.log && \
    echo "BINUTILS_VERSION: ${BINUTILS_VERSION}" >> /root/toolchain-info.log && \
    echo "MINGW_VERSION: ${MINGW_VERSION}" >> /root/toolchain-info.log && \
    echo "MINGW_CRT: ${MINGW_CRT}" >> /root/toolchain-info.log && \
    echo "MINGW_THREADS: ${MINGW_THREADS}" >> /root/toolchain-info.log && \
    echo "MOLD_VERSION: ${MOLD_VERSION}" >> /root/toolchain-info.log && \
    echo "GCC_VERSION: ${GCC_VERSION}" >> /root/toolchain-info.log && \
    echo "CLANG_VERSION: ${CLANG_VERSION}" >> /root/toolchain-info.log && \
    echo "CMAKE_VERSION: ${CMAKE_VERSION}" >> /root/toolchain-info.log && \
    echo "LINUX_PYTHON_VERSION: ${LINUX_PYTHON_VERSION}" >> /root/toolchain-info.log && \
    rm -rf $WD/build $WD/src

CMD ["true"]

## hashcat cross-build section

FROM ubuntu:${UBUNTU_VERSION} AS hashcat-builder

ARG UBUNTU_VERSION \
    WD \
    HOST_ARCH

ENV DEBIAN_FRONTEND=noninteractive \
    PATH=/opt/toolchain/native/bin:/opt/toolchain/cross/bin:/opt/toolchain/clang/bin:/opt/linux-python/bin:$PATH \
    LD_LIBRARY_PATH=/opt/toolchain/native/lib64:/opt/toolchain/native/lib \
    TERM=xterm-256color \
    UBUNTU_VERSION=${UBUNTU_VERSION} \
    HOST_ARCH=${HOST_ARCH} \
    WD=${WD}

COPY --from=builder-toolchain /opt /opt
COPY --from=builder-toolchain /root/toolchain-info.log /root/toolchain-info.log

RUN apt-get update && apt-get -y --no-install-recommends install apt-utils && apt-get -y --no-install-recommends install \
    build-essential \
    ca-certificates curl \
    dos2unix \
    git \
    libc6-dev \
    make \
    time \
    wget \
    zstd \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

RUN echo "$WD/native/lib" > /etc/ld.so.conf.d/toolchain.conf && \
    echo "$WD/native/lib64" >> /etc/ld.so.conf.d/toolchain.conf && \
    echo "/opt/openssl/lib" >> /etc/ld.so.conf.d/toolchain.conf && \
    ldconfig && \
    update-alternatives --install /usr/bin/ar ar $WD/native/bin/ar 100 && \
    update-alternatives --install /usr/bin/ranlib ranlib $WD/native/bin/ranlib 100 && \
    update-alternatives --install /usr/bin/${HOST_ARCH}-linux-gnu-ld ${HOST_ARCH}-linux-gnu-ld $WD/native/bin/ld 100 && \
    update-alternatives --set ar $WD/native/bin/ar && \
    update-alternatives --set ranlib $WD/native/bin/ranlib && \
    update-alternatives --set ${HOST_ARCH}-linux-gnu-ld $WD/native/bin/ld && \
    update-alternatives --install /usr/bin/gcc gcc $WD/native/bin/gcc 100 && \
    update-alternatives --install /usr/bin/g++ g++ $WD/native/bin/g++ 100 && \
    update-alternatives --install /usr/bin/cc cc $WD/native/bin/gcc 100 && \
    update-alternatives --install /usr/bin/c++ c++ $WD/native/bin/g++ 100 && \
    update-alternatives --set gcc $WD/native/bin/gcc && \
    update-alternatives --set g++ $WD/native/bin/g++ && \
    update-alternatives --set cc $WD/native/bin/gcc && \
    update-alternatives --set c++ $WD/native/bin/g++ && \
    mkdir -p $WD/src /opt/win-python /root/out

# 7zip

ARG SEVEN_ZIP_VERSION=25.01
ENV SEVEN_ZIP_VERSION=${SEVEN_ZIP_VERSION}

RUN cd $WD/src && git clone --depth 1 --branch ${SEVEN_ZIP_VERSION} https://github.com/ip7z/7zip.git && \
    cd 7zip/CPP/7zip/Bundles/Alone2 && make -f makefile.gcc -j && cp _o/7zz ${WD}/native/bin/7z && cd $WD/src && rm -rf 7zip

# win-iconv

ARG WIN_ICONV_VERSION=0.0.10
ENV WIN_ICONV_VERSION=${WIN_ICONV_VERSION}

RUN cd $WD/src && git clone --depth 1 --branch v${WIN_ICONV_VERSION} https://github.com/win-iconv/win-iconv.git && cd win-iconv && \
    cmake \
    -D WIN_ICONV_BUILD_EXECUTABLE=OFF \
    -D CMAKE_INSTALL_PREFIX=/opt/win-iconv-64 \
    -D CMAKE_C_COMPILER=$(which x86_64-w64-mingw32-gcc) \
    -D CMAKE_CXX_COMPILER=$(which x86_64-w64-mingw32-g++) \
    -D CMAKE_SYSTEM_NAME=Windows \
    -D CMAKE_TRY_COMPILE_TARGET_TYPE=STATIC_LIBRARY \
    -D CMAKE_C_STANDARD_LIBRARIES="-static-libgcc" \
    -D CMAKE_CXX_STANDARD_LIBRARIES="-static-libgcc -static-libstdc++" \
    . && make install && cd $WD/src && rm -rf win-iconv

# Python (windows)

ARG WIN_PYTHON_VERSION=3.12.11-1
ENV WIN_PYTHON_VERSION=${WIN_PYTHON_VERSION}

RUN cd /opt/win-python && \
    wget --no-verbose -t 3 -c --https-only https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-python-${WIN_PYTHON_VERSION}-any.pkg.tar.zst && \
    unzstd mingw-w64-x86_64-python-${WIN_PYTHON_VERSION}-any.pkg.tar.zst && tar -xf mingw-w64-x86_64-python-${WIN_PYTHON_VERSION}-any.pkg.tar && \
    rm -rf mingw-w64-x86_64-python-${WIN_PYTHON_VERSION}-any.pkg.*

# rust

ARG RUST_VERSION=1.90.0
ENV RUST_VERSION=${RUST_VERSION}

RUN curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain ${RUST_VERSION}; /root/.cargo/bin/rustup target add x86_64-pc-windows-gnu

ENV PATH=/root/.cargo/bin:$PATH

# hashcat

ARG CACHE_BUST=1 \
    ENABLE_LTO=1 \
    MAINTAINER_MODE=1 \
    USE_MOLD=1 \
    USE_CLANG=1 \
    USE_GCC=0

ENV CACHE_BUST=${CACHE_BUST} \
    ENABLE_LTO=${ENABLE_LTO} \
    MAINTAINER_MODE=${MAINTAINER_MODE} \
    USE_MOLD=${USE_MOLD} \
    USE_CLANG=${USE_CLANG} \
    USE_GCC=${USE_GCC}

RUN cd /root && git clone https://github.com/hashcat/hashcat.git

COPY docker/patches/ubuntu/ /root/patches/

RUN bash -c 'shopt -s nullglob; cd /root/hashcat; for p in /root/patches/*.patch /root/patches/*.diff; do git apply "$p"; done'

RUN if [ "${USE_CLANG}" = "1" ]; then \
      cp -af /root/hashcat /root/hashcat-clang && cd /root/hashcat-clang && \
      make USE_MOLD=${USE_MOLD} \
           ENABLE_LTO=${ENABLE_LTO} \
           MAINTAINER_MODE=${MAINTAINER_MODE} \
           AR=llvm-ar AR_LINUX=llvm-ar AR_WIN=llvm-ar \
           CC=clang CC_LINUX=clang CC_WIN=clang \
           CXX=clang++ CXX_LINUX=clang++ CXX_WIN=clang++ \
           binaries -s -j 2>&1 | stdbuf -oL -eL tee -a /root/binaries.clang.log && \
      tools/package_bin.sh && \
      cd /root/xy && \
      if [ "${USE_GCC}" = "1" ]; then \
        for f in hashcat-*; do \
          if [ -d "$f" ]; then \
            mv "$f" /root/out/"${f}-clang"; \
          elif [ "${f##*.}" = "7z" ]; then \
            mv "$f" /root/out/"${f%.7z}-clang.7z"; \
          fi; \
        done; \
      fi; \
    fi

RUN if [ "${USE_GCC}" = "1" ]; then \
      cp -af /root/hashcat /root/hashcat-gcc && cd /root/hashcat-gcc && \
      make USE_MOLD=${USE_MOLD} \
           ENABLE_LTO=${ENABLE_LTO} \
           MAINTAINER_MODE=${MAINTAINER_MODE} \
           binaries -s -j 2>&1 | stdbuf -oL -eL  tee -a /root/binaries.gcc.log && \
      tools/package_bin.sh && \
      cd /root/xy && \
      if [ "${USE_CLANG}" = "1" ]; then \
        for f in hashcat-*; do \
          if [ -d "$f" ]; then \
            mv "$f" /root/out/"${f}-gcc"; \
          elif [ "${f##*.}" = "7z" ]; then \
            mv "$f" /root/out/"${f%.7z}-gcc.7z"; \
          fi; \
        done; \
      fi; \
    fi

RUN if [ "${USE_CLANG}" = "1" ] && [ "${USE_GCC}" = "1" ]; then mv /root/out/* /root/xy/; fi; cd /root && rm -rf /root/out /root/hashcat-* $WD/src /tmp/* /var/tmp/*

ARG WITH_CODE_ANALYSIS=0
ENV WITH_CODE_ANALYSIS=${WITH_CODE_ANALYSIS}

RUN echo "WIN_PYTHON_VERSION: ${WIN_PYTHON_VERSION}" >> /root/toolchain-info.log && \
    echo "WIN_ICONV_VERSION: ${WIN_ICONV_VERSION}" >> /root/toolchain-info.log && \
    echo "SEVEN_ZIP_VERSION: ${SEVEN_ZIP_VERSION}" >> /root/toolchain-info.log && \
    echo "RUST_VERSION: ${RUST_VERSION}" >> /root/toolchain-info.log && \
    echo "ENABLE_LTO: ${ENABLE_LTO}" >> /root/toolchain-info.log && \
    echo "MAINTAINER_MODE: ${MAINTAINER_MODE}" >> /root/toolchain-info.log && \
    echo "USE_MOLD: ${USE_MOLD}" >> /root/toolchain-info.log && \
    echo "USE_CLANG: ${USE_CLANG}" >> /root/toolchain-info.log && \
    echo "USE_GCC: ${USE_GCC}" >> /root/toolchain-info.log && \
    echo "WITH_CODE_ANALYSIS: ${WITH_CODE_ANALYSIS}" >> /root/toolchain-info.log && \
    echo -n "GLIBC_VERSION: " >> tee -a /root/toolchain-info.log && \
    strings /root/xy/hashcat-*/hashcat.bin | grep -o 'GLIBC_[0-9]\+\.[0-9]\+' | sort -V | tail -1 >> /root/toolchain-info.log && \
    ldd /root/xy/hashcat-*/hashcat.bin | tee -a /root/linux_libs_dump.log && \
    x86_64-w64-mingw32-objdump -p /root/xy/hashcat-*/hashcat.exe | grep 'DLL Name' | tee -a /root/win_libs_dump.log

# TODO: move to code-analysis.sh

RUN if [ "$WITH_CODE_ANALYSIS" -eq "1" ]; then \
      mkdir -p /root/code-analysis/clang-tidy /root/code-analysis/scan-build && \
      python3 -m pip install --upgrade pip --root-user-action=ignore && python3 -m pip install PyYAML --root-user-action=ignore && \
      echo "Checks: 'clang-analyzer-*,cppcoreguidelines-*,-cppcoreguidelines-avoid-magic-numbers,modernize-*,performance-*,-modernize-use-trailing-return-type,-clang-diagnostic-unused-command-line-argument'" > /root/hashcat/.clang-tidy && \
      echo "HeaderFilterRegex: 'src/.*'" >> /root/hashcat/.clang-tidy && \
      cd /root/hashcat && make clean -s && \
      intercept-build make USE_MOLD=${USE_MOLD} ENABLE_LTO=${ENABLE_LTO} MAINTAINER_MODE=${MAINTAINER_MODE} AR=llvm-ar AR_LINUX=llvm-ar AR_WIN=llvm-ar CC=clang CC_LINUX=clang CC_WIN=clang CXX=clang++ CXX_LINUX=clang++ CXX_WIN=clang++ linux -s -j && \
      run-clang-tidy -p=. -export-fixes=/root/code-analysis/clang-tidy/fixes.yaml -quiet > /root/code-analysis/clang-tidy/output.log 2>&1 && make clean -s && \
      scan-build -o /root/code-analysis/scan-build make USE_MOLD=${USE_MOLD} ENABLE_LTO=${ENABLE_LTO} MAINTAINER_MODE=${MAINTAINER_MODE} AR=llvm-ar AR_LINUX=llvm-ar AR_WIN=llvm-ar CC=clang CC_LINUX=clang CC_WIN=clang CXX=clang++ CXX_LINUX=clang++ CXX_WIN=clang++ linux -s -j > /root/code-analysis/scan-build/output.log 2>&1 && make clean -s; \
    fi

CMD ["/bin/bash"]
