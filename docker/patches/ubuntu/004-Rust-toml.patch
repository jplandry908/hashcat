diff --git a/Rust/bridges/dynamic_hash/Cargo.toml b/Rust/bridges/dynamic_hash/Cargo.toml
index 7dc02ffe1..fc0dbe8c8 100644
--- a/Rust/bridges/dynamic_hash/Cargo.toml
+++ b/Rust/bridges/dynamic_hash/Cargo.toml
@@ -24,4 +24,7 @@ thread_local = "1.1.9"
 bindgen = "0.72.0"
 
 [profile.release]
+opt-level = 3
+codegen-units = 1
 strip = "symbols"
+panic = "abort"
diff --git a/Rust/bridges/generic_hash/Cargo.toml b/Rust/bridges/generic_hash/Cargo.toml
index 246d87400..fcd07f86a 100644
--- a/Rust/bridges/generic_hash/Cargo.toml
+++ b/Rust/bridges/generic_hash/Cargo.toml
@@ -14,4 +14,7 @@ crate-type = ["cdylib"]
 bindgen = "0.72.0"
 
 [profile.release]
+opt-level = 3
+codegen-units = 1
 strip = "symbols"
+panic = "abort"
diff --git a/Rust/feeds/dummy/Cargo.toml b/Rust/feeds/dummy/Cargo.toml
index 01b095baf..6d5d081ee 100644
--- a/Rust/feeds/dummy/Cargo.toml
+++ b/Rust/feeds/dummy/Cargo.toml
@@ -9,4 +9,7 @@ edition = "2024"
 crate-type = ["cdylib"]
 
 [profile.release]
+opt-level = 3
+codegen-units = 1
 strip = "symbols"
+panic = "abort"
diff --git a/src/bridges/bridge_rust_generic_hash.mk b/src/bridges/bridge_rust_generic_hash.mk
index d2008e46d..31847ade8 100644
--- a/src/bridges/bridge_rust_generic_hash.mk
+++ b/src/bridges/bridge_rust_generic_hash.mk
@@ -7,23 +7,17 @@ RUST_SCAN_DIR   := Rust/bridges
 RUST_SUBS_DIR   := bridges/subs
 RUST_MODE_FLAG  := $(if $(filter $(RUST_BUILD_MODE),release),--release,)
 
-CARGO_PRESENT  := false
-RUSTUP_PRESENT := false
+CARGO_PRESENT   := false
+RUSTUP_PRESENT  := false
 
-CARGO_VERSION := $(word 2, $(shell $(RUST_CARGO) version 2>/dev/null))
+CARGO_VERSION   := $(word 2, $(shell $(RUST_CARGO) version 2>/dev/null))
 ifneq ($(filter 1.%,$(CARGO_VERSION)),)
-	CARGO_PRESENT := true
+CARGO_PRESENT   := true
 endif
 
-RUSTUP_VERSION := $(word 2, $(shell $(RUST_RUSTUP) --version 2>/dev/null))
+RUSTUP_VERSION  := $(word 2, $(shell $(RUST_RUSTUP) --version 2>/dev/null))
 ifneq ($(filter 1.%,$(RUSTUP_VERSION)),)
-	RUSTUP_PRESENT := true
-endif
-
-ifeq ($(shell uname),Darwin)
-	RUST_LIB_EXT = dylib
-else
-	RUST_LIB_EXT = so
+RUSTUP_PRESENT  := true
 endif
 
 COMMON_PREREQS  := src/bridges/bridge_rust_generic_hash.c src/cpu_features.c
@@ -36,18 +30,43 @@ ifeq ($(BRIDGE_SUFFIX),dll)
 PLUGINS_DEFAULT := $(PLUGINS_WIN)
 endif
 
-RED   := $(shell tput setaf 1)
-RESET := $(shell tput sgr 0)
+RED             := $(shell tput setaf 1)
+RESET           := $(shell tput sgr 0)
 
 ifeq ($(CARGO_PRESENT),true)
 
+ifeq ($(shell uname),Darwin)
+RUST_LIB_EXT    := dylib
+else
+RUST_LIB_EXT    := so
+endif
+
+RUSTFLAGS_SO    :=
+RUSTFLAGS_DLL   := -C link-arg=-fuse-ld=lld
+
+ifeq ($(UNAME),Linux)
+ifeq ($(USE_MOLD),1)
+RUSTFLAGS_SO    += -C link-arg=-fuse-ld=mold
+endif
+endif
+
+ifeq ($(ENABLE_LTO),1)
+RUSTFLAGS_SO    += -C lto -C embed-bitcode=y
+RUSTFLAGS_DLL   += -C lto -C embed-bitcode=y
+endif
+
+ifeq ($(BUILD_MODE),native)
+RUSTFLAGS_SO    += -C target-cpu=native
+RUSTFLAGS_DLL   += -C target-cpu=native
+endif
+
 $(RUST_SUBS_DIR)/%.so: $(RUST_SCAN_DIR)/%/Cargo.toml
-	$(RUST_CARGO) build --quiet $(RUST_MODE_FLAG) --manifest-path $^
+	RUSTFLAGS="$(RUSTFLAGS_SO)" $(RUST_CARGO) build --quiet $(RUST_MODE_FLAG) --manifest-path $^
 	cp Rust/bridges/$*/target/$(RUST_BUILD_MODE)/lib$*.$(RUST_LIB_EXT) $@
 ifeq ($(RUSTUP_PRESENT),true)
 $(RUST_SUBS_DIR)/%.dll: $(RUST_SCAN_DIR)/%/Cargo.toml
 	$(RUST_RUSTUP) --quiet target add x86_64-pc-windows-gnu
-	$(RUST_CARGO) build --quiet $(RUST_MODE_FLAG) --manifest-path $^ --target x86_64-pc-windows-gnu
+	RUSTFLAGS="$(RUSTFLAGS_DLL)" $(RUST_CARGO) build --quiet $(RUST_MODE_FLAG) --manifest-path $^ --target x86_64-pc-windows-gnu
 	cp Rust/bridges/$*/target/x86_64-pc-windows-gnu/$(RUST_BUILD_MODE)/$*.dll $@
 else
 $(RUST_SUBS_DIR)/%.dll: $(RUST_SCAN_DIR)/%/Cargo.toml
diff --git a/src/feeds/rust_support.mk b/src/feeds/rust_support.mk
index 4fe94feda..f762a2321 100644
--- a/src/feeds/rust_support.mk
+++ b/src/feeds/rust_support.mk
@@ -6,34 +6,53 @@ RUST_RUSTUP     ?= rustup
 RUST_SCAN_DIR   := Rust/feeds
 RUST_MODE_FLAG  := $(if $(filter $(RUST_BUILD_MODE),release),--release,)
 
-CARGO_PRESENT  := false
-RUSTUP_PRESENT := false
+CARGO_PRESENT   := false
+RUSTUP_PRESENT  := false
 
-CARGO_VERSION := $(word 2, $(shell $(RUST_CARGO) version 2>/dev/null))
+CARGO_VERSION   := $(word 2, $(shell $(RUST_CARGO) version 2>/dev/null))
 ifneq ($(filter 1.%,$(CARGO_VERSION)),)
-	CARGO_PRESENT := true
+CARGO_PRESENT   := true
 endif
 
-RUSTUP_VERSION := $(word 2, $(shell $(RUST_RUSTUP) --version 2>/dev/null))
+RUSTUP_VERSION  := $(word 2, $(shell $(RUST_RUSTUP) --version 2>/dev/null))
 ifneq ($(filter 1.%,$(RUSTUP_VERSION)),)
-	RUSTUP_PRESENT := true
+RUSTUP_PRESENT  := true
 endif
 
 ifeq ($(CARGO_PRESENT),true)
 
 ifeq ($(shell uname),Darwin)
-	RUST_LIB_EXT = dylib
+RUST_LIB_EXT    := dylib
 else
-	RUST_LIB_EXT = so
+RUST_LIB_EXT    := so
+endif
+
+RUSTFLAGS_SO    :=
+RUSTFLAGS_DLL   := -C link-arg=-fuse-ld=lld
+
+ifeq ($(UNAME),Linux)
+ifeq ($(USE_MOLD),1)
+RUSTFLAGS_SO    += -C link-arg=-fuse-ld=mold
+endif
+endif
+
+ifeq ($(ENABLE_LTO),1)
+RUSTFLAGS_SO    += -C lto -C embed-bitcode=y
+RUSTFLAGS_DLL   += -C lto -C embed-bitcode=y
+endif
+
+ifeq ($(BUILD_MODE),native)
+RUSTFLAGS_SO    += -C target-cpu=native
+RUSTFLAGS_DLL   += -C target-cpu=native
 endif
 
 feeds/rust_%.so: $(RUST_SCAN_DIR)/%/Cargo.toml
-	$(RUST_CARGO) build --quiet $(RUST_MODE_FLAG) --manifest-path $^
+	RUSTFLAGS="$(RUSTFLAGS_SO)" $(RUST_CARGO) build --quiet $(RUST_MODE_FLAG) --manifest-path $^
 	cp Rust/feeds/$*/target/$(RUST_BUILD_MODE)/lib$*.$(RUST_LIB_EXT) $@
 ifeq ($(RUSTUP_PRESENT),true)
 feeds/rust_%.dll: $(RUST_SCAN_DIR)/%/Cargo.toml
 	$(RUST_RUSTUP) --quiet target add x86_64-pc-windows-gnu
-	$(RUST_CARGO) build --quiet $(RUST_MODE_FLAG) --manifest-path $^ --target x86_64-pc-windows-gnu
+	RUSTFLAGS="$(RUSTFLAGS_DLL)" $(RUST_CARGO) build --quiet $(RUST_MODE_FLAG) --manifest-path $^ --target x86_64-pc-windows-gnu
 	cp Rust/feeds/$*/target/x86_64-pc-windows-gnu/$(RUST_BUILD_MODE)/$*.dll $@
 else
 feeds/rust_%.dll: $(RUST_SCAN_DIR)/%/Cargo.toml
