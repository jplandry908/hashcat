diff --git a/src/modules/module_13100.c b/src/modules/module_13100.c
index f59c326e0..0a6198ab5 100644
--- a/src/modules/module_13100.c
+++ b/src/modules/module_13100.c
@@ -9,6 +9,7 @@
 #include "bitops.h"
 #include "convert.h"
 #include "shared.h"
+#include "memory.h"
 
 static const u32   ATTACK_EXEC    = ATTACK_EXEC_INSIDE_KERNEL;
 static const u32   DGST_POS0      = 0;
@@ -304,7 +305,7 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
 {
   const krb5tgs_t *krb5tgs = (const krb5tgs_t *) esalt_buf;
 
-  char data[5120 * 4 * 2] = { 0 };
+  char *data = (char *) hcmalloc (5120 * 4 * 2);
 
   for (u32 i = 0, j = 0; i < krb5tgs->edata2_len; i += 1, j += 2)
   {
@@ -340,6 +341,8 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
       data);
   }
 
+  hcfree (data);
+
   return line_len;
 }
 
diff --git a/src/modules/module_15500.c b/src/modules/module_15500.c
index 720b6a785..1321aa478 100644
--- a/src/modules/module_15500.c
+++ b/src/modules/module_15500.c
@@ -9,6 +9,7 @@
 #include "bitops.h"
 #include "convert.h"
 #include "shared.h"
+#include "memory.h"
 
 static const u32   ATTACK_EXEC    = ATTACK_EXEC_INSIDE_KERNEL;
 static const u32   DGST_POS0      = 3;
@@ -229,7 +230,7 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
 {
   const jks_sha1_t *jks_sha1 = (const jks_sha1_t *) esalt_buf;
 
-  char enc_key[16384 + 1] = { 0 };
+  char *enc_key = (char *) hcmalloc (16384 + 1);
 
   const u8 *ptr = (const u8 *) jks_sha1->enc_key_buf;
 
@@ -275,6 +276,8 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
     alias
   );
 
+  hcfree (enc_key);
+
   return line_len;
 }
 
diff --git a/src/modules/module_16900.c b/src/modules/module_16900.c
index bcd026d1e..a7ac637e2 100644
--- a/src/modules/module_16900.c
+++ b/src/modules/module_16900.c
@@ -9,6 +9,7 @@
 #include "bitops.h"
 #include "convert.h"
 #include "shared.h"
+#include "memory.h"
 
 static const u32   ATTACK_EXEC    = ATTACK_EXEC_OUTSIDE_KERNEL;
 static const u32   DGST_POS0      = 0;
@@ -241,7 +242,7 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
 
   const ansible_vault_t *ansible_vault = (const ansible_vault_t *) esalt_buf;
 
-  u8 ct_data[16384 + 1] = { 0 };
+  u8 *ct_data = (u8 *) hcmalloc (16384 + 1);
 
   const u32 *ct_data_ptr = ansible_vault->ct_data_buf;
 
@@ -272,6 +273,8 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
     digest[6],
     digest[7]);
 
+  hcfree (ct_data);
+
   return line_len;
 }
 
diff --git a/src/modules/module_18200.c b/src/modules/module_18200.c
index 0c257b160..1a9fd439b 100644
--- a/src/modules/module_18200.c
+++ b/src/modules/module_18200.c
@@ -9,6 +9,7 @@
 #include "bitops.h"
 #include "convert.h"
 #include "shared.h"
+#include "memory.h"
 
 static const u32   ATTACK_EXEC    = ATTACK_EXEC_INSIDE_KERNEL;
 static const u32   DGST_POS0      = 0;
@@ -275,7 +276,7 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
 {
   const krb5asrep_t *krb5asrep = (const krb5asrep_t *) esalt_buf;
 
-  char data[5120 * 4 * 2] = { 0 };
+  char *data = (char *) hcmalloc (5120 * 4 * 2);
 
   for (u32 i = 0, j = 0; i < krb5asrep->edata2_len; i += 1, j += 2)
   {
@@ -309,6 +310,8 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
       data);
   }
 
+  hcfree (data);
+
   return line_len;
 }
 
diff --git a/src/modules/module_19600.c b/src/modules/module_19600.c
index 9b9a9f258..36b220a40 100644
--- a/src/modules/module_19600.c
+++ b/src/modules/module_19600.c
@@ -9,6 +9,7 @@
 #include "bitops.h"
 #include "convert.h"
 #include "shared.h"
+#include "memory.h"
 
 static const u32   ATTACK_EXEC    = ATTACK_EXEC_OUTSIDE_KERNEL;
 static const u32   DGST_POS0      = 0;
@@ -261,7 +262,7 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
 {
   const krb5tgs_17_t *krb5tgs = (const krb5tgs_17_t *) esalt_buf;
 
-  char data[5120 * 4 * 2] = { 0 };
+  char *data = (char *) hcmalloc (5120 * 4 * 2);
 
   for (u32 i = 0, j = 0; i < krb5tgs->edata2_len; i += 1, j += 2)
   {
@@ -279,6 +280,8 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
     krb5tgs->checksum[2],
     data);
 
+  hcfree (data);
+
   return line_len;
 }
 
diff --git a/src/modules/module_19700.c b/src/modules/module_19700.c
index 8f6459225..d8cd77cfd 100644
--- a/src/modules/module_19700.c
+++ b/src/modules/module_19700.c
@@ -9,6 +9,7 @@
 #include "bitops.h"
 #include "convert.h"
 #include "shared.h"
+#include "memory.h"
 
 static const u32   ATTACK_EXEC    = ATTACK_EXEC_OUTSIDE_KERNEL;
 static const u32   DGST_POS0      = 0;
@@ -278,7 +279,7 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
 {
   const krb5tgs_18_t *krb5tgs = (const krb5tgs_18_t *) esalt_buf;
 
-  char data[5120 * 4 * 2] = { 0 };
+  char *data = (char *) hcmalloc (5120 * 4 * 2);
 
   for (u32 i = 0, j = 0; i < krb5tgs->edata2_len; i += 1, j += 2)
   {
@@ -296,6 +297,8 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
     krb5tgs->checksum[2],
     data);
 
+  hcfree (data);
+
   return line_len;
 }
 
diff --git a/src/modules/module_21700.c b/src/modules/module_21700.c
index 2efa1bbbb..b65ed6a7f 100644
--- a/src/modules/module_21700.c
+++ b/src/modules/module_21700.c
@@ -252,9 +252,7 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
 
   // data buf:
 
-  char data_buf[32768 + 1];
-
-  memset (data_buf, 0, sizeof (data_buf));
+  char *data_buf = (char *) hcmalloc (32768 + 1);
 
   for (u32 i = 0, j = 0; i < esalt->data_len; i += 1, j += 2)
   {
@@ -280,6 +278,8 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
     data_buf,
     mac);
 
+  hcfree (data_buf);
+
   return bytes_written;
 }
 
diff --git a/src/modules/module_29511.c b/src/modules/module_29511.c
index ba876a40c..351209dc8 100644
--- a/src/modules/module_29511.c
+++ b/src/modules/module_29511.c
@@ -334,19 +334,19 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
 
   // salt
 
-  char salt_buf[LUKS_SALT_HEX_LEN + 1] = { 0 };
+  char *salt_buf = (char *) hcmalloc (LUKS_SALT_HEX_LEN + 1);
 
   hex_encode ((const u8 *) salt->salt_buf, LUKS_SALT_LEN, (u8 *) salt_buf);
 
   // af
 
-  char af_buf[LUKS_AF_MAX_HEX_LEN + 1] = { 0 };
+  char *af_buf = (char *) hcmalloc (LUKS_AF_MAX_HEX_LEN + 1);
 
   hex_encode ((const u8 *) luks->af_buf, luks->af_len, (u8 *) af_buf);
 
   // ct
 
-  char ct_buf[LUKS_CT_HEX_LEN + 1] = { 0 };
+  char *ct_buf = (char *) hcmalloc (LUKS_CT_HEX_LEN + 1);
 
   hex_encode ((const u8 *) luks->ct_buf, LUKS_CT_LEN, (u8 *) ct_buf);
 
@@ -361,6 +361,10 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
     af_buf,
     ct_buf);
 
+  hcfree (salt_buf);
+  hcfree (af_buf);
+  hcfree (ct_buf);
+
   return line_len;
 }
 
diff --git a/src/modules/module_29512.c b/src/modules/module_29512.c
index 0d324eefd..f3cea39e7 100644
--- a/src/modules/module_29512.c
+++ b/src/modules/module_29512.c
@@ -351,19 +351,19 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
 
   // salt
 
-  char salt_buf[LUKS_SALT_HEX_LEN + 1] = { 0 };
+  char *salt_buf = (char *) hcmalloc (LUKS_SALT_HEX_LEN + 1);
 
   hex_encode ((const u8 *) salt->salt_buf, LUKS_SALT_LEN, (u8 *) salt_buf);
 
   // af
 
-  char af_buf[LUKS_AF_MAX_HEX_LEN + 1] = { 0 };
+  char *af_buf = (char *) hcmalloc (LUKS_AF_MAX_HEX_LEN + 1);
 
   hex_encode ((const u8 *) luks->af_buf, luks->af_len, (u8 *) af_buf);
 
   // ct
 
-  char ct_buf[LUKS_CT_HEX_LEN + 1] = { 0 };
+  char *ct_buf = (char *) hcmalloc (LUKS_CT_HEX_LEN + 1);
 
   hex_encode ((const u8 *) luks->ct_buf, LUKS_CT_LEN, (u8 *) ct_buf);
 
@@ -378,6 +378,10 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
     af_buf,
     ct_buf);
 
+  hcfree (salt_buf);
+  hcfree (af_buf);
+  hcfree (ct_buf);
+
   return line_len;
 }
 
diff --git a/src/modules/module_29513.c b/src/modules/module_29513.c
index 30f048065..a1835fd6e 100644
--- a/src/modules/module_29513.c
+++ b/src/modules/module_29513.c
@@ -351,19 +351,19 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
 
   // salt
 
-  char salt_buf[LUKS_SALT_HEX_LEN + 1] = { 0 };
+  char *salt_buf = (char *) hcmalloc (LUKS_SALT_HEX_LEN + 1);
 
   hex_encode ((const u8 *) salt->salt_buf, LUKS_SALT_LEN, (u8 *) salt_buf);
 
   // af
 
-  char af_buf[LUKS_AF_MAX_HEX_LEN + 1] = { 0 };
+  char *af_buf = (char *) hcmalloc (LUKS_AF_MAX_HEX_LEN + 1);
 
   hex_encode ((const u8 *) luks->af_buf, luks->af_len, (u8 *) af_buf);
 
   // ct
 
-  char ct_buf[LUKS_CT_HEX_LEN + 1] = { 0 };
+  char *ct_buf = (char *) hcmalloc (LUKS_CT_HEX_LEN + 1);
 
   hex_encode ((const u8 *) luks->ct_buf, LUKS_CT_LEN, (u8 *) ct_buf);
 
@@ -378,6 +378,10 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
     af_buf,
     ct_buf);
 
+  hcfree (salt_buf);
+  hcfree (af_buf);
+  hcfree (ct_buf);
+
   return line_len;
 }
 
diff --git a/src/modules/module_29521.c b/src/modules/module_29521.c
index f60b115d5..85d7ff406 100644
--- a/src/modules/module_29521.c
+++ b/src/modules/module_29521.c
@@ -351,19 +351,19 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
 
   // salt
 
-  char salt_buf[LUKS_SALT_HEX_LEN + 1] = { 0 };
+  char *salt_buf = (char *) hcmalloc (LUKS_SALT_HEX_LEN + 1);
 
   hex_encode ((const u8 *) salt->salt_buf, LUKS_SALT_LEN, (u8 *) salt_buf);
 
   // af
 
-  char af_buf[LUKS_AF_MAX_HEX_LEN + 1] = { 0 };
+  char *af_buf = (char *) hcmalloc (LUKS_AF_MAX_HEX_LEN + 1);
 
   hex_encode ((const u8 *) luks->af_buf, luks->af_len, (u8 *) af_buf);
 
   // ct
 
-  char ct_buf[LUKS_CT_HEX_LEN + 1] = { 0 };
+  char *ct_buf = (char *) hcmalloc (LUKS_CT_HEX_LEN + 1);
 
   hex_encode ((const u8 *) luks->ct_buf, LUKS_CT_LEN, (u8 *) ct_buf);
 
@@ -378,6 +378,10 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
     af_buf,
     ct_buf);
 
+  hcfree (salt_buf);
+  hcfree (af_buf);
+  hcfree (ct_buf);
+
   return line_len;
 }
 
diff --git a/src/modules/module_29522.c b/src/modules/module_29522.c
index 748e0c4f5..ca969fdab 100644
--- a/src/modules/module_29522.c
+++ b/src/modules/module_29522.c
@@ -351,19 +351,19 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
 
   // salt
 
-  char salt_buf[LUKS_SALT_HEX_LEN + 1] = { 0 };
+  char *salt_buf = (char *) hcmalloc (LUKS_SALT_HEX_LEN + 1);
 
   hex_encode ((const u8 *) salt->salt_buf, LUKS_SALT_LEN, (u8 *) salt_buf);
 
   // af
 
-  char af_buf[LUKS_AF_MAX_HEX_LEN + 1] = { 0 };
+  char *af_buf = (char *) hcmalloc (LUKS_AF_MAX_HEX_LEN + 1);
 
   hex_encode ((const u8 *) luks->af_buf, luks->af_len, (u8 *) af_buf);
 
   // ct
 
-  char ct_buf[LUKS_CT_HEX_LEN + 1] = { 0 };
+  char *ct_buf = (char *) hcmalloc (LUKS_CT_HEX_LEN + 1);
 
   hex_encode ((const u8 *) luks->ct_buf, LUKS_CT_LEN, (u8 *) ct_buf);
 
@@ -378,6 +378,10 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
     af_buf,
     ct_buf);
 
+  hcfree (salt_buf);
+  hcfree (af_buf);
+  hcfree (ct_buf);
+
   return line_len;
 }
 
diff --git a/src/modules/module_29523.c b/src/modules/module_29523.c
index 288cb2a5d..d91cbf390 100644
--- a/src/modules/module_29523.c
+++ b/src/modules/module_29523.c
@@ -351,19 +351,19 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
 
   // salt
 
-  char salt_buf[LUKS_SALT_HEX_LEN + 1] = { 0 };
+  char *salt_buf = (char *) hcmalloc (LUKS_SALT_HEX_LEN + 1);
 
   hex_encode ((const u8 *) salt->salt_buf, LUKS_SALT_LEN, (u8 *) salt_buf);
 
   // af
 
-  char af_buf[LUKS_AF_MAX_HEX_LEN + 1] = { 0 };
+  char *af_buf = (char *) hcmalloc (LUKS_AF_MAX_HEX_LEN + 1);
 
   hex_encode ((const u8 *) luks->af_buf, luks->af_len, (u8 *) af_buf);
 
   // ct
 
-  char ct_buf[LUKS_CT_HEX_LEN + 1] = { 0 };
+  char *ct_buf = (char *) hcmalloc (LUKS_CT_HEX_LEN + 1);
 
   hex_encode ((const u8 *) luks->ct_buf, LUKS_CT_LEN, (u8 *) ct_buf);
 
@@ -378,6 +378,10 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
     af_buf,
     ct_buf);
 
+  hcfree (salt_buf);
+  hcfree (af_buf);
+  hcfree (ct_buf);
+
   return line_len;
 }
 
diff --git a/src/modules/module_29531.c b/src/modules/module_29531.c
index fe685155c..abb2a0d53 100644
--- a/src/modules/module_29531.c
+++ b/src/modules/module_29531.c
@@ -351,19 +351,19 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
 
   // salt
 
-  char salt_buf[LUKS_SALT_HEX_LEN + 1] = { 0 };
+  char *salt_buf = (char *) hcmalloc (LUKS_SALT_HEX_LEN + 1);
 
   hex_encode ((const u8 *) salt->salt_buf, LUKS_SALT_LEN, (u8 *) salt_buf);
 
   // af
 
-  char af_buf[LUKS_AF_MAX_HEX_LEN + 1] = { 0 };
+  char *af_buf = (char *) hcmalloc (LUKS_AF_MAX_HEX_LEN + 1);
 
   hex_encode ((const u8 *) luks->af_buf, luks->af_len, (u8 *) af_buf);
 
   // ct
 
-  char ct_buf[LUKS_CT_HEX_LEN + 1] = { 0 };
+  char *ct_buf = (char *) hcmalloc (LUKS_CT_HEX_LEN + 1);
 
   hex_encode ((const u8 *) luks->ct_buf, LUKS_CT_LEN, (u8 *) ct_buf);
 
@@ -378,6 +378,10 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
     af_buf,
     ct_buf);
 
+  hcfree (salt_buf);
+  hcfree (af_buf);
+  hcfree (ct_buf);
+
   return line_len;
 }
 
diff --git a/src/modules/module_29532.c b/src/modules/module_29532.c
index 16f03d0a7..5aa938b30 100644
--- a/src/modules/module_29532.c
+++ b/src/modules/module_29532.c
@@ -351,19 +351,19 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
 
   // salt
 
-  char salt_buf[LUKS_SALT_HEX_LEN + 1] = { 0 };
+  char *salt_buf = (char *) hcmalloc (LUKS_SALT_HEX_LEN + 1);
 
   hex_encode ((const u8 *) salt->salt_buf, LUKS_SALT_LEN, (u8 *) salt_buf);
 
   // af
 
-  char af_buf[LUKS_AF_MAX_HEX_LEN + 1] = { 0 };
+  char *af_buf = (char *) hcmalloc (LUKS_AF_MAX_HEX_LEN + 1);
 
   hex_encode ((const u8 *) luks->af_buf, luks->af_len, (u8 *) af_buf);
 
   // ct
 
-  char ct_buf[LUKS_CT_HEX_LEN + 1] = { 0 };
+  char *ct_buf = (char *) hcmalloc (LUKS_CT_HEX_LEN + 1);
 
   hex_encode ((const u8 *) luks->ct_buf, LUKS_CT_LEN, (u8 *) ct_buf);
 
@@ -378,6 +378,10 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
     af_buf,
     ct_buf);
 
+  hcfree (salt_buf);
+  hcfree (af_buf);
+  hcfree (ct_buf);
+
   return line_len;
 }
 
diff --git a/src/modules/module_29533.c b/src/modules/module_29533.c
index 20038466c..9563c70ae 100644
--- a/src/modules/module_29533.c
+++ b/src/modules/module_29533.c
@@ -351,19 +351,19 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
 
   // salt
 
-  char salt_buf[LUKS_SALT_HEX_LEN + 1] = { 0 };
+  char *salt_buf = (char *) hcmalloc (LUKS_SALT_HEX_LEN + 1);
 
   hex_encode ((const u8 *) salt->salt_buf, LUKS_SALT_LEN, (u8 *) salt_buf);
 
   // af
 
-  char af_buf[LUKS_AF_MAX_HEX_LEN + 1] = { 0 };
+  char *af_buf = (char *) hcmalloc (LUKS_AF_MAX_HEX_LEN + 1);
 
   hex_encode ((const u8 *) luks->af_buf, luks->af_len, (u8 *) af_buf);
 
   // ct
 
-  char ct_buf[LUKS_CT_HEX_LEN + 1] = { 0 };
+  char *ct_buf = (char *) hcmalloc (LUKS_CT_HEX_LEN + 1);
 
   hex_encode ((const u8 *) luks->ct_buf, LUKS_CT_LEN, (u8 *) ct_buf);
 
@@ -378,6 +378,10 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
     af_buf,
     ct_buf);
 
+  hcfree (salt_buf);
+  hcfree (af_buf);
+  hcfree (ct_buf);
+
   return line_len;
 }
 
diff --git a/src/modules/module_29541.c b/src/modules/module_29541.c
index ba96a35dc..968c273bb 100644
--- a/src/modules/module_29541.c
+++ b/src/modules/module_29541.c
@@ -334,19 +334,19 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
 
   // salt
 
-  char salt_buf[LUKS_SALT_HEX_LEN + 1] = { 0 };
+  char *salt_buf = (char *) hcmalloc (LUKS_SALT_HEX_LEN + 1);
 
   hex_encode ((const u8 *) salt->salt_buf, LUKS_SALT_LEN, (u8 *) salt_buf);
 
   // af
 
-  char af_buf[LUKS_AF_MAX_HEX_LEN + 1] = { 0 };
+  char *af_buf = (char *) hcmalloc (LUKS_AF_MAX_HEX_LEN + 1);
 
   hex_encode ((const u8 *) luks->af_buf, luks->af_len, (u8 *) af_buf);
 
   // ct
 
-  char ct_buf[LUKS_CT_HEX_LEN + 1] = { 0 };
+  char *ct_buf = (char *) hcmalloc (LUKS_CT_HEX_LEN + 1);
 
   hex_encode ((const u8 *) luks->ct_buf, LUKS_CT_LEN, (u8 *) ct_buf);
 
@@ -361,6 +361,10 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
     af_buf,
     ct_buf);
 
+  hcfree (salt_buf);
+  hcfree (af_buf);
+  hcfree (ct_buf);
+
   return line_len;
 }
 
diff --git a/src/modules/module_29542.c b/src/modules/module_29542.c
index 357b47179..65edaecdb 100644
--- a/src/modules/module_29542.c
+++ b/src/modules/module_29542.c
@@ -351,19 +351,19 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
 
   // salt
 
-  char salt_buf[LUKS_SALT_HEX_LEN + 1] = { 0 };
+  char *salt_buf = (char *) hcmalloc (LUKS_SALT_HEX_LEN + 1);
 
   hex_encode ((const u8 *) salt->salt_buf, LUKS_SALT_LEN, (u8 *) salt_buf);
 
   // af
 
-  char af_buf[LUKS_AF_MAX_HEX_LEN + 1] = { 0 };
+  char *af_buf = (char *) hcmalloc (LUKS_AF_MAX_HEX_LEN + 1);
 
   hex_encode ((const u8 *) luks->af_buf, luks->af_len, (u8 *) af_buf);
 
   // ct
 
-  char ct_buf[LUKS_CT_HEX_LEN + 1] = { 0 };
+  char *ct_buf = (char *) hcmalloc (LUKS_CT_HEX_LEN + 1);
 
   hex_encode ((const u8 *) luks->ct_buf, LUKS_CT_LEN, (u8 *) ct_buf);
 
@@ -378,6 +378,10 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
     af_buf,
     ct_buf);
 
+  hcfree (salt_buf);
+  hcfree (af_buf);
+  hcfree (ct_buf);
+
   return line_len;
 }
 
diff --git a/src/modules/module_29543.c b/src/modules/module_29543.c
index 1641096a7..f3cda647d 100644
--- a/src/modules/module_29543.c
+++ b/src/modules/module_29543.c
@@ -351,19 +351,19 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
 
   // salt
 
-  char salt_buf[LUKS_SALT_HEX_LEN + 1] = { 0 };
+  char *salt_buf = (char *) hcmalloc (LUKS_SALT_HEX_LEN + 1);
 
   hex_encode ((const u8 *) salt->salt_buf, LUKS_SALT_LEN, (u8 *) salt_buf);
 
   // af
 
-  char af_buf[LUKS_AF_MAX_HEX_LEN + 1] = { 0 };
+  char *af_buf = (char *) hcmalloc (LUKS_AF_MAX_HEX_LEN + 1);
 
   hex_encode ((const u8 *) luks->af_buf, luks->af_len, (u8 *) af_buf);
 
   // ct
 
-  char ct_buf[LUKS_CT_HEX_LEN + 1] = { 0 };
+  char *ct_buf = (char *) hcmalloc (LUKS_CT_HEX_LEN + 1);
 
   hex_encode ((const u8 *) luks->ct_buf, LUKS_CT_LEN, (u8 *) ct_buf);
 
@@ -378,6 +378,10 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
     af_buf,
     ct_buf);
 
+  hcfree (salt_buf);
+  hcfree (af_buf);
+  hcfree (ct_buf);
+
   return line_len;
 }
 
diff --git a/src/modules/module_31800.c b/src/modules/module_31800.c
index ed2c6c973..5e0a09335 100644
--- a/src/modules/module_31800.c
+++ b/src/modules/module_31800.c
@@ -323,7 +323,7 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
 
   for (int i = 0; i < 1024; i++) ct_buf[i] = byte_swap_32 (onepassword8->ct_buf[i]);
 
-  u8 ct_buf8[(1024 * 2 * 4) + 1];
+  u8 *ct_buf8 = (u8 *) hcmalloc ((1024 * 2 * 4) + 1);
 
   const int ct_len = hex_encode ((const u8 *) ct_buf, onepassword8->ct_len, ct_buf8);
 
@@ -358,6 +358,8 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
     onepassword8->tag_buf[2],
     onepassword8->tag_buf[3]);
 
+  hcfree (ct_buf8);
+
   return out_len;
 }
 
diff --git a/src/modules/module_32100.c b/src/modules/module_32100.c
index 18a957682..6026120ed 100644
--- a/src/modules/module_32100.c
+++ b/src/modules/module_32100.c
@@ -9,6 +9,7 @@
 #include "bitops.h"
 #include "convert.h"
 #include "shared.h"
+#include "memory.h"
 
 static const u32   ATTACK_EXEC    = ATTACK_EXEC_OUTSIDE_KERNEL;
 static const u32   DGST_POS0      = 0;
@@ -319,7 +320,7 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
 {
   const krb5asrep_17_t *krb5asrep = (const krb5asrep_17_t *) esalt_buf;
 
-  char data[5120 * 4 * 2] = { 0 };
+  char *data = (char *) hcmalloc (5120 * 4 * 2);
 
   for (u32 i = 0, j = 0; i < krb5asrep->edata2_len; i += 1, j += 2)
   {
@@ -352,6 +353,8 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
       krb5asrep->checksum[2]);
   }
 
+  hcfree (data);
+
   return line_len;
 }
 
diff --git a/src/modules/module_32200.c b/src/modules/module_32200.c
index 4c71f9427..8e8705d66 100644
--- a/src/modules/module_32200.c
+++ b/src/modules/module_32200.c
@@ -9,6 +9,7 @@
 #include "bitops.h"
 #include "convert.h"
 #include "shared.h"
+#include "memory.h"
 
 static const u32   ATTACK_EXEC    = ATTACK_EXEC_OUTSIDE_KERNEL;
 static const u32   DGST_POS0      = 0;
@@ -319,7 +320,7 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
 {
   const krb5asrep_18_t *krb5asrep = (const krb5asrep_18_t *) esalt_buf;
 
-  char data[5120 * 4 * 2] = { 0 };
+  char *data = (char *) hcmalloc (5120 * 4 * 2);
 
   for (u32 i = 0, j = 0; i < krb5asrep->edata2_len; i += 1, j += 2)
   {
@@ -352,6 +353,8 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
       krb5asrep->checksum[2]);
   }
 
+  hcfree (data);
+
   return line_len;
 }
 
diff --git a/src/modules/module_34100.c b/src/modules/module_34100.c
index fda73b456..fc4c3962c 100644
--- a/src/modules/module_34100.c
+++ b/src/modules/module_34100.c
@@ -421,19 +421,19 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
 
   // salt
 
-  char salt_buf[LUKS_SALT_HEX_LEN + 1] = { 0 };
+  char *salt_buf = (char *) hcmalloc (LUKS_SALT_HEX_LEN + 1);
 
   hex_encode ((const u8 *) salt->salt_buf, LUKS_SALT_LEN, (u8 *) salt_buf);
 
   // af
 
-  char af_buf[LUKS_AF_MAX_HEX_LEN + 1] = { 0 };
+  char *af_buf = (char *) hcmalloc (LUKS_AF_MAX_HEX_LEN + 1);
 
   hex_encode ((const u8 *) luks->af_buf, luks->af_len, (u8 *) af_buf);
 
   // ct
 
-  char ct_buf[LUKS_CT_HEX_LEN + 1] = { 0 };
+  char *ct_buf = (char *) hcmalloc (LUKS_CT_HEX_LEN + 1);
 
   hex_encode ((const u8 *) luks->ct_buf, LUKS_CT_LEN, (u8 *) ct_buf);
 
@@ -450,6 +450,10 @@ int module_hash_encode (MAYBE_UNUSED const hashconfig_t *hashconfig, MAYBE_UNUSE
     af_buf,
     ct_buf);
 
+  hcfree (salt_buf);
+  hcfree (af_buf);
+  hcfree (ct_buf);
+
   return line_len;
 }
 
diff --git a/src/mpsp.c b/src/mpsp.c
index e574bfeee..cc9a14e3e 100644
--- a/src/mpsp.c
+++ b/src/mpsp.c
@@ -184,7 +184,7 @@ static int mp_css_utf16be_expand (hashcat_ctx_t *hashcat_ctx)
   return 0;
 }
 
-static int mp_css_to_uniq_tbl (hashcat_ctx_t *hashcat_ctx, u32 css_cnt, cs_t *css, u32 uniq_tbls[SP_PW_MAX][CHARSIZ])
+static int mp_css_to_uniq_tbl (hashcat_ctx_t *hashcat_ctx, u32 css_cnt, cs_t *css, u32 **uniq_tbls)
 {
   /* generates a lookup table where key is the char itself for fastest possible lookup performance */
 
@@ -709,7 +709,7 @@ static int sp_setup_tbl (hashcat_ctx_t *hashcat_ctx)
 
   u64 *markov_stats_ptr = markov_stats_buf;
 
-  u64 *markov_stats_buf_by_key[SP_PW_MAX][CHARSIZ];
+  u64 *(*markov_stats_buf_by_key)[CHARSIZ] = (u64 *(*)[CHARSIZ]) hcmalloc (SP_PW_MAX * sizeof (*markov_stats_buf_by_key));
 
   for (int i = 0; i < SP_PW_MAX; i++)
   {
@@ -740,6 +740,10 @@ static int sp_setup_tbl (hashcat_ctx_t *hashcat_ctx)
   {
     event_log_error (hashcat_ctx, "%s: %s", hcstat, strerror (errno));
 
+    hcfree (root_stats_buf);
+    hcfree (markov_stats_buf);
+    hcfree (markov_stats_buf_by_key);
+
     return -1;
   }
 
@@ -749,6 +753,10 @@ static int sp_setup_tbl (hashcat_ctx_t *hashcat_ctx)
   {
     event_log_error (hashcat_ctx, "%s: %s", hcstat, strerror (errno));
 
+    hcfree (root_stats_buf);
+    hcfree (markov_stats_buf);
+    hcfree (markov_stats_buf_by_key);
+
     return -1;
   }
 
@@ -764,6 +772,10 @@ static int sp_setup_tbl (hashcat_ctx_t *hashcat_ctx)
 
     hcfree (inbuf);
 
+    hcfree (root_stats_buf);
+    hcfree (markov_stats_buf);
+    hcfree (markov_stats_buf_by_key);
+
     return -1;
   }
 
@@ -784,6 +796,10 @@ static int sp_setup_tbl (hashcat_ctx_t *hashcat_ctx)
     hcfree (inbuf);
     hcfree (outbuf);
 
+    hcfree (root_stats_buf);
+    hcfree (markov_stats_buf);
+    hcfree (markov_stats_buf_by_key);
+
     return -1;
   }
 
@@ -794,6 +810,10 @@ static int sp_setup_tbl (hashcat_ctx_t *hashcat_ctx)
     hcfree (inbuf);
     hcfree (outbuf);
 
+    hcfree (root_stats_buf);
+    hcfree (markov_stats_buf);
+    hcfree (markov_stats_buf_by_key);
+
     return -1;
   }
 
@@ -836,6 +856,10 @@ static int sp_setup_tbl (hashcat_ctx_t *hashcat_ctx)
   {
     event_log_error (hashcat_ctx, "%s: Invalid header", hcstat);
 
+    hcfree (root_stats_buf);
+    hcfree (markov_stats_buf);
+    hcfree (markov_stats_buf_by_key);
+
     return -1;
   }
 
@@ -843,6 +867,10 @@ static int sp_setup_tbl (hashcat_ctx_t *hashcat_ctx)
   {
     event_log_error (hashcat_ctx, "%s: Invalid header", hcstat);
 
+    hcfree (root_stats_buf);
+    hcfree (markov_stats_buf);
+    hcfree (markov_stats_buf_by_key);
+
     return -1;
   }
 
@@ -915,7 +943,7 @@ static int sp_setup_tbl (hashcat_ctx_t *hashcat_ctx)
 
   hcstat_table_t *markov_table_ptr = markov_table_buf;
 
-  hcstat_table_t *markov_table_buf_by_key[SP_PW_MAX][CHARSIZ];
+  hcstat_table_t *(*markov_table_buf_by_key)[CHARSIZ] = (hcstat_table_t *(*)[CHARSIZ]) hcmalloc (SP_PW_MAX * sizeof (*markov_table_buf_by_key));
 
   for (int i = 0; i < SP_PW_MAX; i++)
   {
@@ -949,6 +977,8 @@ static int sp_setup_tbl (hashcat_ctx_t *hashcat_ctx)
 
   hcfree (root_stats_buf);
   hcfree (markov_stats_buf);
+  hcfree (markov_stats_buf_by_key);
+
 
   /**
    * Finally sort them
@@ -967,6 +997,8 @@ static int sp_setup_tbl (hashcat_ctx_t *hashcat_ctx)
     }
   }
 
+  hcfree (markov_table_buf_by_key);
+
   return 0;
 }
 
@@ -988,7 +1020,7 @@ static int sp_get_sum (u32 start, u32 stop, cs_t *root_css_buf, u64 *result)
   return 0;
 }
 
-static void sp_tbl_to_css (hcstat_table_t *root_table_buf, hcstat_table_t *markov_table_buf, cs_t *root_css_buf, cs_t *markov_css_buf, u32 threshold, u32 uniq_tbls[SP_PW_MAX][CHARSIZ])
+static void sp_tbl_to_css (hcstat_table_t *root_table_buf, hcstat_table_t *markov_table_buf, cs_t *root_css_buf, cs_t *markov_css_buf, u32 threshold, u32 **uniq_tbls)
 {
   memset (root_css_buf,   0, SP_PW_MAX *           sizeof (cs_t));
   memset (markov_css_buf, 0, SP_PW_MAX * CHARSIZ * sizeof (cs_t));
@@ -1084,7 +1116,11 @@ static int mask_append_final (hashcat_ctx_t *hashcat_ctx, const char *mask)
 
   if (mask_ctx->masks_avail == mask_ctx->masks_cnt)
   {
-    mask_ctx->masks = (char **) hcrealloc (mask_ctx->masks, mask_ctx->masks_avail * sizeof (char *), INCR_MASKS * sizeof (char *));
+    char **tmp = (char **) hcrealloc (mask_ctx->masks, mask_ctx->masks_avail * sizeof (char *), INCR_MASKS * sizeof (char *));
+
+    if (tmp == NULL) return -1;
+
+    mask_ctx->masks = tmp;
 
     mask_ctx->masks_avail += INCR_MASKS;
   }
@@ -1317,12 +1353,18 @@ int mask_ctx_update_loop (hashcat_ctx_t *hashcat_ctx)
 
         if (mp_gen_css (hashcat_ctx, mask_ctx->mask, strlen (mask_ctx->mask), mask_ctx->mp_sys, mask_ctx->mp_usr, mask_ctx->css_buf, &mask_ctx->css_cnt) == -1) return -1;
 
-        u32 uniq_tbls[SP_PW_MAX][CHARSIZ] = { { 0 } };
+        u32 **uniq_tbls = (u32 **) hcmalloc (SP_PW_MAX * sizeof(u32 *));
+
+        for (int i = 0; i < SP_PW_MAX; i++) uniq_tbls[i] = (u32 *) hcmalloc(CHARSIZ * sizeof(u32));
 
         mp_css_to_uniq_tbl (hashcat_ctx, mask_ctx->css_cnt, mask_ctx->css_buf, uniq_tbls);
 
         sp_tbl_to_css (mask_ctx->root_table_buf, mask_ctx->markov_table_buf, mask_ctx->root_css_buf, mask_ctx->markov_css_buf, user_options->markov_threshold, uniq_tbls);
 
+        for (int i = 0; i < SP_PW_MAX; i++) hcfree (uniq_tbls[i]);
+
+        hcfree (uniq_tbls);
+
         if (sp_get_sum (0, mask_ctx->css_cnt, mask_ctx->root_css_buf, &mask_ctx->bfs_cnt) == -1)
         {
           event_log_error (hashcat_ctx, "Integer overflow detected in keyspace of mask: %s", mask_ctx->mask);
@@ -1340,12 +1382,18 @@ int mask_ctx_update_loop (hashcat_ctx_t *hashcat_ctx)
 
         if (mp_gen_css (hashcat_ctx, mask_ctx->mask, strlen (mask_ctx->mask), mask_ctx->mp_sys, mask_ctx->mp_usr, mask_ctx->css_buf, &mask_ctx->css_cnt) == -1) return -1;
 
-        u32 uniq_tbls[SP_PW_MAX][CHARSIZ] = { { 0 } };
+        u32 **uniq_tbls = (u32 **) hcmalloc (SP_PW_MAX * sizeof(u32 *));
+
+        for (int i = 0; i < SP_PW_MAX; i++) uniq_tbls[i] = (u32 *) hcmalloc(CHARSIZ * sizeof(u32));
 
         mp_css_to_uniq_tbl (hashcat_ctx, mask_ctx->css_cnt, mask_ctx->css_buf, uniq_tbls);
 
         sp_tbl_to_css (mask_ctx->root_table_buf, mask_ctx->markov_table_buf, mask_ctx->root_css_buf, mask_ctx->markov_css_buf, user_options->markov_threshold, uniq_tbls);
 
+        for (int i = 0; i < SP_PW_MAX; i++) hcfree (uniq_tbls[i]);
+
+        hcfree (uniq_tbls);
+
         if (sp_get_sum (0, mask_ctx->css_cnt, mask_ctx->root_css_buf, &combinator_ctx->combs_cnt) == -1)
         {
           event_log_error (hashcat_ctx, "Integer overflow detected in keyspace of mask: %s", mask_ctx->mask);
@@ -1441,12 +1489,18 @@ int mask_ctx_update_loop (hashcat_ctx_t *hashcat_ctx)
         }
       }
 
-      u32 uniq_tbls[SP_PW_MAX][CHARSIZ] = { { 0 } };
+      u32 **uniq_tbls = (u32 **) hcmalloc (SP_PW_MAX * sizeof(u32 *));
+
+      for (int i = 0; i < SP_PW_MAX; i++) uniq_tbls[i] = (u32 *) hcmalloc(CHARSIZ * sizeof(u32));
 
       mp_css_to_uniq_tbl (hashcat_ctx, mask_ctx->css_cnt, mask_ctx->css_buf, uniq_tbls);
 
       sp_tbl_to_css (mask_ctx->root_table_buf, mask_ctx->markov_table_buf, mask_ctx->root_css_buf, mask_ctx->markov_css_buf, user_options->markov_threshold, uniq_tbls);
 
+      for (int i = 0; i < SP_PW_MAX; i++) hcfree (uniq_tbls[i]);
+
+      hcfree (uniq_tbls);
+
       if (sp_get_sum (0, mask_ctx->css_cnt, mask_ctx->root_css_buf, &status_ctx->words_cnt) == -1)
       {
         event_log_error (hashcat_ctx, "Integer overflow detected in keyspace of mask: %s", mask_ctx->mask);
